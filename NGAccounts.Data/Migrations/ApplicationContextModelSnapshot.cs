// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NGAccounts.Data;

namespace NGAccounts.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NGAccounts.Models.AccountTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CreditLedgerAccountId");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<int>("DebitLedgerAccountId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreditLedgerAccountId");

                    b.HasIndex("DebitLedgerAccountId");

                    b.ToTable("AccountTransaction");
                });

            modelBuilder.Entity("NGAccounts.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AppShortName")
                        .HasMaxLength(50);

                    b.Property<string>("AppVersion")
                        .HasMaxLength(15);

                    b.Property<string>("FooterText")
                        .HasMaxLength(150);

                    b.Property<bool>("IsBoxedLayout");

                    b.Property<bool>("IsFixedLayout");

                    b.Property<bool>("IsToggleRightSidebar");

                    b.Property<bool>("IsToggleSidebar");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Skin")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("NGAccounts.Models.GeneralSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("SettingGroup")
                        .HasMaxLength(50);

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("GeneralSetting");
                });

            modelBuilder.Entity("NGAccounts.Models.LedgerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddedBy");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("LedgerAccount");
                });

            modelBuilder.Entity("NGAccounts.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MenuIcon")
                        .HasMaxLength(100);

                    b.Property<string>("MenuText")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MenuURL")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("ParentId");

                    b.Property<int?>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("NGAccounts.Models.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCreate");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsUpdate");

                    b.Property<int?>("MenuId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("SortOrder");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("NGAccounts.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("NGAccounts.Models.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("NGAccounts.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About")
                        .HasMaxLength(500);

                    b.Property<int?>("AddedBy");

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("ChangePasswordCode")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModied")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool?>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LastLogoutTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("NGAccounts.Models.AccountTransaction", b =>
                {
                    b.HasOne("NGAccounts.Models.LedgerAccount", "LedgerAccount_CreditLedgerAccountId")
                        .WithMany("AccountTransaction_CreditLedgerAccountIds")
                        .HasForeignKey("CreditLedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NGAccounts.Models.LedgerAccount", "LedgerAccount_DebitLedgerAccountId")
                        .WithMany("AccountTransaction_DebitLedgerAccountIds")
                        .HasForeignKey("DebitLedgerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NGAccounts.Models.LedgerAccount", b =>
                {
                    b.HasOne("NGAccounts.Models.LedgerAccount", "LedgerAccount2")
                        .WithMany("LedgerAccount_ParentIds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("NGAccounts.Models.Menu", b =>
                {
                    b.HasOne("NGAccounts.Models.Menu", "Menu2")
                        .WithMany("Menu_ParentIds")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("NGAccounts.Models.MenuPermission", b =>
                {
                    b.HasOne("NGAccounts.Models.Menu", "Menu_MenuId")
                        .WithMany("MenuPermission_MenuIds")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NGAccounts.Models.Role", "Role_RoleId")
                        .WithMany("MenuPermission_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NGAccounts.Models.User", "User_UserId")
                        .WithMany("MenuPermission_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NGAccounts.Models.RoleUser", b =>
                {
                    b.HasOne("NGAccounts.Models.Role", "Role_RoleId")
                        .WithMany("RoleUser_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NGAccounts.Models.User", "User_UserId")
                        .WithMany("RoleUser_UserIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NGAccounts.Models.User", b =>
                {
                    b.HasOne("NGAccounts.Models.Role", "Role_RoleId")
                        .WithMany("User_RoleIds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
